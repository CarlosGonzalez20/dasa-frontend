import React, { useState } from 'react';
import './LoginForm.css';
import useNotification from '../../../Hooks/useNotification/useNotification';

const LoginForm = ({ onLoginSuccess, onRegisterClick, apiBaseUrl }) => {
  const [formData, setFormData] = useState({ email: '', password: '' });
  const [isLoading, setIsLoading] = useState(false);
  const [isRecovering, setIsRecovering] = useState(false);
  const [recoveryEmail, setRecoveryEmail] = useState('');
  const { addNotification } = useNotification();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const response = await fetch(`${apiBaseUrl}/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      const data = await response.json();

      if (data.success) {
        addNotification({
          type: 'success',
          message: data.message || 'Sesi√≥n iniciada correctamente'
        });
        onLoginSuccess(data.data.token, data.data.usuario);
      } else {
        addNotification({
          type: 'error',
          message: data.message || 'Credenciales incorrectas'
        });
      }
    } catch (error) {
      addNotification({
        type: 'error',
        message: 'Error de conexi√≥n con el servidor'
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleRecoverPassword = async () => {
    if (!recoveryEmail) {
      addNotification({
        type: 'error',
        message: 'Por favor ingresa tu correo electr√≥nico'
      });
      return;
    }

    setIsRecovering(true);

    try {
      const response = await fetch(`${apiBaseUrl}/recuperar-password`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: recoveryEmail })
      });

      const data = await response.json();

      if (data.success) {
        addNotification({
          type: 'success',
          message: data.message || 'Se ha enviado una nueva contrase√±a a tu correo'
        });
        setRecoveryEmail('');
      } else {
        addNotification({
          type: 'error',
          message: data.message || 'Error al recuperar la contrase√±a'
        });
      }
    } catch (error) {
      addNotification({
        type: 'error',
        message: 'Error de conexi√≥n con el servidor'
      });
    } finally {
      setIsRecovering(false);
    }
  };

  return (
    <div className="login-form-container">

      {/* BANNER DE DESARROLLO - INICIO (F√ÅCIL DE ELIMINAR) */}
      <div className="development-banner">
        <h3>üöß Sitio en Desarrollo üöß</h3>
        <p>
          ¬°Gracias por visitarnos! Estamos trabajando en mejorar tu experiencia. 
          Si te registras, tus datos se migrar√°n al sistema final cuando est√© terminado.
          Actualmente solo est√°n disponibles las funciones de usuario b√°sicas.
        </p>
      </div>
      <div className="launch-date-banner">
        <p>üéâ <strong>Lanzamiento oficial:</strong> 1 de octubre del presente a√±o üéâ</p>
      </div>
      {/* BANNER DE DESARROLLO - FIN */}

      <div className="form-header">
        <button onClick={() => window.history.back()} className="back-btn">‚Üê Volver</button>
        <h2>Iniciar Sesi√≥n</h2>
      </div>

      <form onSubmit={handleSubmit} className="auth-form">
        <div className="form-group">
          <label htmlFor="email">Correo Electr√≥nico</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            required
            placeholder="tu@email.com"
            disabled={isLoading}
          />
        </div>

        <div className="form-group">
          <label htmlFor="password">Contrase√±a</label>
          <input
            type="password"
            id="password"
            name="password"
            value={formData.password}
            onChange={handleInputChange}
            required
            placeholder="Tu contrase√±a"
            disabled={isLoading}
          />
        </div>

        <button type="submit" className="submit-btn" disabled={isLoading}>
          {isLoading ? 'Iniciando sesi√≥n...' : 'Iniciar Sesi√≥n'}
        </button>
      </form>

      {/* Secci√≥n de recuperaci√≥n de contrase√±a */}
      <div className="recovery-section">
        <p>¬øOlvidaste tu contrase√±a?</p>
        <div className="recovery-input">
          <input
            type="email"
            placeholder="Ingresa tu correo electr√≥nico"
            value={recoveryEmail}
            onChange={(e) => setRecoveryEmail(e.target.value)}
            disabled={isRecovering}
          />
          <button 
            onClick={handleRecoverPassword}
            className="recovery-btn"
            disabled={isRecovering}
          >
            {isRecovering ? 'Enviando...' : 'Recuperar Contrase√±a'}
          </button>
        </div>
        <small className="recovery-note">
          Te enviaremos una contrase√±a temporal. Por seguridad, c√°mbiala despu√©s de iniciar sesi√≥n.
        </small>
      </div>

      <div className="auth-footer">
        <p>¬øNo tienes una cuenta? 
          <button onClick={onRegisterClick} className="link-btn">
            Reg√≠strate aqu√≠
          </button>
        </p>
      </div>
    </div>
  );
};

export default LoginForm;